
importFrom(stats,
           simulate,
           tsdiag)
importFrom(lattice,
           xyplot,
           qqmath)

## CORE FUNCTIONS

export(hydromad)
S3method(print, hydromad)
S3method(fitted, hydromad)
S3method(residuals, hydromad)
S3method(observed, hydromad)
S3method(vcov, hydromad)
S3method(deviance, hydromad)
S3method(str, hydromad.runlist)
export(isValidModel)
S3method(isValidModel, default)
S3method(isValidModel, hydromad)

S3method(predict, hydromad)

S3method(update, hydromad)

S3method(coef, hydromad)

export(absorbScale)
S3method(absorbScale, hydromad)

S3method(simulate, hydromad)

S3method(summary, hydromad)
S3method(summary, hydromad.runlist)
S3method(print, summary.hydromad)
S3method(print, summaryWithBreaks.hydromad)

S3method(plot, hydromad)
S3method(xyplot, hydromad)
S3method(xyplot, hydromad.runlist)
export(errormasscurve)
S3method(errormasscurve, default)
S3method(qqmath, hydromad)
S3method(tsdiag, hydromad)


## ROUTING MODELS

export(tryModelOrders)
S3method(summary, tryModelOrders)

export(makePrefilter,
       estimateDelay)

export(tfParsConvert)

export(armax.sim,
       ssg.armax,
       normalise.armax,
       armax.ls.fit,
       armax.sriv.fit,
       armax.inverse.sim,
       armax.inverse.fit)
useDynLib(hydromad, sriv_system)
useDynLib(hydromad, inverse_filter)

export(expuh.sim,
       ssg.expuh,
       normalise.expuh,
       expuh.ls.fit,
       expuh.sriv.fit,
       expuh.inverse.fit)

export(filter_loss) # export?
useDynLib(hydromad, filter_constloss)

export(powuh.sim,
       ssg.powuh,
       normalise.powuh)

export(lambda.sim,
       ssg.lambda,
       normalise.lambda,
       lambda.inverse.sim,
       lambda.inverse.fit)
useDynLib(hydromad, inverse_filter_lambda)

## tf.R
S3method(print, tf)
S3method(coef, tf)
S3method(update, tf)
S3method(predict, tf)
S3method(fitted, tf)
S3method(observed, tf)
S3method(xyplot, tf)
S3method(vcov, tf)


## SOIL MOISTURE ACCOUNTING MODELS

export(scalar.sim)
export(absorbScale.hydromad.scalar)

export(cwi.sim)
export(absorbScale.hydromad.cwi)
export(filter_tv)
useDynLib(hydromad, ar1_tv)

export(cmd.sim)
useDynLib(hydromad, sma_cmd)

export(bucket.sim)
useDynLib(hydromad, sma_bucket)

export(awbm.sim)
useDynLib(hydromad, sma_awbm)

export(sacramento.sim)
useDynLib(hydromad, sma_sac)

export(snow.sim)
useDynLib(hydromad, sma_snow)

export(runoffratio.sim)

export(dbm.sim)
export(absorbScale.hydromad.dbm)

## CALIBRATION METHODS

export(fitDbmToPeaks)

export(fitBySampling)

export(fitByOptim)
export(fitByOptim1)

export(fitBySCE)

export(fitByDE)

export(fitByDream)

## TODO: fitByGenoud?

export(optimtrace)
S3method(optimtrace, default)

export(tsFitStat)
export(fitStat)
export(fitBias)

export(objFunVal)
S3method(objFunVal, default)
S3method(objFunVal, hydromad)

export(parameterSets)

## sce.R
export(SCEoptim)


## RUNLIST

## runlist.R
export(runlist,
       as.runlist)
S3method("[", runlist)
S3method(coef, runlist)
S3method(summary, runlist)
S3method(print, runlist)
S3method(residuals, runlist)
S3method(fitted, runlist)
S3method(update, runlist)
S3method(errormasscurve, runlist)
S3method(xyplot, runlist)
S3method(qqmath, runlist)


## MISCELLANEOUS

export(convertFlow)

## events.R
export(findThresh,
       eventseq, 
       eventapply,
       eventinfo)

## utilities.R
export(tsCleanup,
       autocorrTime,
       byDays, byYears, bySecs,
       observed,
       observed.default,
       numericSummary)

## rollccf.R
export(rollccf,
       xyplot.rollccf,
       ccfForLags)

export(hydromad.stats,
       hmadstat)

export(hydromad.options,
       hydromad.getOption)


## SWIMP

## swimp.R
export(swimp)
useDynLib(hydromad, swimp_core)

## poweroid.R
export(poweroid)
